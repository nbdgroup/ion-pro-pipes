import { NgModule } from '@angular/core';
import { AorAnPipe } from './a-or-an';
import { UcWordsPipe } from './ucwords';
import { LeftTrimPipe } from './ltrim';
import { RepeatPipe } from './repeat';
import { RightTrimPipe } from './rtrim';
import { ScanPipe } from './scan';
import { ShortenPipe } from './shorten';
import { StripTagsPipe } from './strip-tags';
import { TrimPipe } from './trim';
import { UcFirstPipe } from './ucfirst';
import { SlugifyPipe } from './slugify';
import { CamelizePipe } from './camelize';
import { LatinisePipe } from './latinise';
import { LinesPipe } from './lines';
import { UnderscorePipe } from './underscore';
import { MatchPipe } from './match';
import { TestPipe } from './test';
import { LeftPadPipe } from './lpad';
import { RightPadPipe } from './rpad';
import { MakePluralStringPipe } from './pluralize';
import { WrapPipe } from './wrap';
export const STRING_PIPES = [
    AorAnPipe,
    LeftTrimPipe,
    RepeatPipe,
    RightTrimPipe,
    ScanPipe,
    ShortenPipe,
    StripTagsPipe,
    TrimPipe,
    UcFirstPipe,
    UcWordsPipe,
    SlugifyPipe,
    CamelizePipe,
    LatinisePipe,
    LinesPipe,
    UnderscorePipe,
    MatchPipe,
    TestPipe,
    LeftPadPipe,
    RightPadPipe,
    MakePluralStringPipe,
    WrapPipe,
];
export class NgStringPipesModule {
}
NgStringPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: STRING_PIPES,
                imports: [],
                exports: STRING_PIPES,
            },] }
];
export { AorAnPipe } from './a-or-an';
export { UcWordsPipe } from './ucwords';
export { LeftTrimPipe } from './ltrim';
export { RepeatPipe } from './repeat';
export { RightTrimPipe } from './rtrim';
export { ScanPipe } from './scan';
export { ShortenPipe } from './shorten';
export { StripTagsPipe } from './strip-tags';
export { TrimPipe } from './trim';
export { UcFirstPipe } from './ucfirst';
export { SlugifyPipe } from './slugify';
export { CamelizePipe } from './camelize';
export { LatinisePipe } from './latinise';
export { LinesPipe } from './lines';
export { UnderscorePipe } from './underscore';
export { MatchPipe } from './match';
export { TestPipe } from './test';
export { LeftPadPipe } from './lpad';
export { RightPadPipe } from './rpad';
export { MakePluralStringPipe } from './pluralize';
export { WrapPipe } from './wrap';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbmctcGlwZXMvcGlwZXMvc3RyaW5nL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN0QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDdkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzdDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDMUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFlBQVksQ0FBQztBQUMxQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDOUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDckMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUN0QyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDbkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUVsQyxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUc7SUFDMUIsU0FBUztJQUNULFlBQVk7SUFDWixVQUFVO0lBQ1YsYUFBYTtJQUNiLFFBQVE7SUFDUixXQUFXO0lBQ1gsYUFBYTtJQUNiLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxZQUFZO0lBQ1osWUFBWTtJQUNaLFNBQVM7SUFDVCxjQUFjO0lBQ2QsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsWUFBWTtJQUNaLG9CQUFvQjtJQUNwQixRQUFRO0NBQ1QsQ0FBQztBQU9GLE1BQU0sT0FBTyxtQkFBbUI7OztZQUwvQixRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFLFlBQVk7Z0JBQzFCLE9BQU8sRUFBRSxFQUFFO2dCQUNYLE9BQU8sRUFBRSxZQUFZO2FBQ3RCOztBQUdELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDdEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDdEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM3QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDMUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzlDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDdEMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBb3JBblBpcGUgfSBmcm9tICcuL2Etb3ItYW4nO1xyXG5pbXBvcnQgeyBVY1dvcmRzUGlwZSB9IGZyb20gJy4vdWN3b3Jkcyc7XHJcbmltcG9ydCB7IExlZnRUcmltUGlwZSB9IGZyb20gJy4vbHRyaW0nO1xyXG5pbXBvcnQgeyBSZXBlYXRQaXBlIH0gZnJvbSAnLi9yZXBlYXQnO1xyXG5pbXBvcnQgeyBSaWdodFRyaW1QaXBlIH0gZnJvbSAnLi9ydHJpbSc7XHJcbmltcG9ydCB7IFNjYW5QaXBlIH0gZnJvbSAnLi9zY2FuJztcclxuaW1wb3J0IHsgU2hvcnRlblBpcGUgfSBmcm9tICcuL3Nob3J0ZW4nO1xyXG5pbXBvcnQgeyBTdHJpcFRhZ3NQaXBlIH0gZnJvbSAnLi9zdHJpcC10YWdzJztcclxuaW1wb3J0IHsgVHJpbVBpcGUgfSBmcm9tICcuL3RyaW0nO1xyXG5pbXBvcnQgeyBVY0ZpcnN0UGlwZSB9IGZyb20gJy4vdWNmaXJzdCc7XHJcbmltcG9ydCB7IFNsdWdpZnlQaXBlIH0gZnJvbSAnLi9zbHVnaWZ5JztcclxuaW1wb3J0IHsgQ2FtZWxpemVQaXBlIH0gZnJvbSAnLi9jYW1lbGl6ZSc7XHJcbmltcG9ydCB7IExhdGluaXNlUGlwZSB9IGZyb20gJy4vbGF0aW5pc2UnO1xyXG5pbXBvcnQgeyBMaW5lc1BpcGUgfSBmcm9tICcuL2xpbmVzJztcclxuaW1wb3J0IHsgVW5kZXJzY29yZVBpcGUgfSBmcm9tICcuL3VuZGVyc2NvcmUnO1xyXG5pbXBvcnQgeyBNYXRjaFBpcGUgfSBmcm9tICcuL21hdGNoJztcclxuaW1wb3J0IHsgVGVzdFBpcGUgfSBmcm9tICcuL3Rlc3QnO1xyXG5pbXBvcnQgeyBMZWZ0UGFkUGlwZSB9IGZyb20gJy4vbHBhZCc7XHJcbmltcG9ydCB7IFJpZ2h0UGFkUGlwZSB9IGZyb20gJy4vcnBhZCc7XHJcbmltcG9ydCB7IE1ha2VQbHVyYWxTdHJpbmdQaXBlIH0gZnJvbSAnLi9wbHVyYWxpemUnO1xyXG5pbXBvcnQgeyBXcmFwUGlwZSB9IGZyb20gJy4vd3JhcCc7XHJcblxyXG5leHBvcnQgY29uc3QgU1RSSU5HX1BJUEVTID0gW1xyXG4gIEFvckFuUGlwZSxcclxuICBMZWZ0VHJpbVBpcGUsXHJcbiAgUmVwZWF0UGlwZSxcclxuICBSaWdodFRyaW1QaXBlLFxyXG4gIFNjYW5QaXBlLFxyXG4gIFNob3J0ZW5QaXBlLFxyXG4gIFN0cmlwVGFnc1BpcGUsXHJcbiAgVHJpbVBpcGUsXHJcbiAgVWNGaXJzdFBpcGUsXHJcbiAgVWNXb3Jkc1BpcGUsXHJcbiAgU2x1Z2lmeVBpcGUsXHJcbiAgQ2FtZWxpemVQaXBlLFxyXG4gIExhdGluaXNlUGlwZSxcclxuICBMaW5lc1BpcGUsXHJcbiAgVW5kZXJzY29yZVBpcGUsXHJcbiAgTWF0Y2hQaXBlLFxyXG4gIFRlc3RQaXBlLFxyXG4gIExlZnRQYWRQaXBlLFxyXG4gIFJpZ2h0UGFkUGlwZSxcclxuICBNYWtlUGx1cmFsU3RyaW5nUGlwZSxcclxuICBXcmFwUGlwZSxcclxuXTtcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBTVFJJTkdfUElQRVMsXHJcbiAgaW1wb3J0czogW10sXHJcbiAgZXhwb3J0czogU1RSSU5HX1BJUEVTLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdTdHJpbmdQaXBlc01vZHVsZSB7fVxyXG5cclxuZXhwb3J0IHsgQW9yQW5QaXBlIH0gZnJvbSAnLi9hLW9yLWFuJztcclxuZXhwb3J0IHsgVWNXb3Jkc1BpcGUgfSBmcm9tICcuL3Vjd29yZHMnO1xyXG5leHBvcnQgeyBMZWZ0VHJpbVBpcGUgfSBmcm9tICcuL2x0cmltJztcclxuZXhwb3J0IHsgUmVwZWF0UGlwZSB9IGZyb20gJy4vcmVwZWF0JztcclxuZXhwb3J0IHsgUmlnaHRUcmltUGlwZSB9IGZyb20gJy4vcnRyaW0nO1xyXG5leHBvcnQgeyBTY2FuUGlwZSB9IGZyb20gJy4vc2Nhbic7XHJcbmV4cG9ydCB7IFNob3J0ZW5QaXBlIH0gZnJvbSAnLi9zaG9ydGVuJztcclxuZXhwb3J0IHsgU3RyaXBUYWdzUGlwZSB9IGZyb20gJy4vc3RyaXAtdGFncyc7XHJcbmV4cG9ydCB7IFRyaW1QaXBlIH0gZnJvbSAnLi90cmltJztcclxuZXhwb3J0IHsgVWNGaXJzdFBpcGUgfSBmcm9tICcuL3VjZmlyc3QnO1xyXG5leHBvcnQgeyBTbHVnaWZ5UGlwZSB9IGZyb20gJy4vc2x1Z2lmeSc7XHJcbmV4cG9ydCB7IENhbWVsaXplUGlwZSB9IGZyb20gJy4vY2FtZWxpemUnO1xyXG5leHBvcnQgeyBMYXRpbmlzZVBpcGUgfSBmcm9tICcuL2xhdGluaXNlJztcclxuZXhwb3J0IHsgTGluZXNQaXBlIH0gZnJvbSAnLi9saW5lcyc7XHJcbmV4cG9ydCB7IFVuZGVyc2NvcmVQaXBlIH0gZnJvbSAnLi91bmRlcnNjb3JlJztcclxuZXhwb3J0IHsgTWF0Y2hQaXBlIH0gZnJvbSAnLi9tYXRjaCc7XHJcbmV4cG9ydCB7IFRlc3RQaXBlIH0gZnJvbSAnLi90ZXN0JztcclxuZXhwb3J0IHsgTGVmdFBhZFBpcGUgfSBmcm9tICcuL2xwYWQnO1xyXG5leHBvcnQgeyBSaWdodFBhZFBpcGUgfSBmcm9tICcuL3JwYWQnO1xyXG5leHBvcnQgeyBNYWtlUGx1cmFsU3RyaW5nUGlwZSB9IGZyb20gJy4vcGx1cmFsaXplJztcclxuZXhwb3J0IHsgV3JhcFBpcGUgfSBmcm9tICcuL3dyYXAnO1xyXG4iXX0=