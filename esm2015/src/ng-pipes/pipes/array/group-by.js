import { Pipe } from '@angular/core';
import { extractDeepPropertyByMapKey, isFunction } from '../helpers/helpers';
export class GroupByPipe {
    transform(input, discriminator = [], delimiter = '|') {
        if (!Array.isArray(input)) {
            return input;
        }
        return this.groupBy(input, discriminator, delimiter);
    }
    groupBy(list, discriminator, delimiter) {
        return list.reduce((acc, payload) => {
            const key = this.extractKeyByDiscriminator(discriminator, payload, delimiter);
            acc[key] = Array.isArray(acc[key]) ? acc[key].concat([payload]) : [payload];
            return acc;
        }, {});
    }
    extractKeyByDiscriminator(discriminator, payload, delimiter) {
        if (isFunction(discriminator)) {
            return discriminator(payload);
        }
        if (Array.isArray(discriminator)) {
            return discriminator.map(k => extractDeepPropertyByMapKey(payload, k)).join(delimiter);
        }
        return extractDeepPropertyByMapKey(payload, discriminator);
    }
}
GroupByPipe.decorators = [
    { type: Pipe, args: [{ name: 'groupBy' },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtYnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbmctcGlwZXMvcGlwZXMvYXJyYXkvZ3JvdXAtYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRzdFLE1BQU0sT0FBTyxXQUFXO0lBQ3RCLFNBQVMsQ0FBQyxLQUFVLEVBQUUsZ0JBQXFCLEVBQUUsRUFBRSxZQUFvQixHQUFHO1FBQ3BFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRU8sT0FBTyxDQUFDLElBQVcsRUFBRSxhQUFrQixFQUFFLFNBQWlCO1FBQ2hFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQVEsRUFBRSxPQUFlLEVBQUUsRUFBRTtZQUMvQyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUMsYUFBYSxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztZQUU5RSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFNUUsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDVCxDQUFDO0lBRU8seUJBQXlCLENBQUMsYUFBa0IsRUFBRSxPQUFlLEVBQUUsU0FBaUI7UUFDdEYsSUFBSSxVQUFVLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDN0IsT0FBa0IsYUFBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzNDO1FBRUQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQ2hDLE9BQU8sYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLDJCQUEyQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUN4RjtRQUVELE9BQU8sMkJBQTJCLENBQUMsT0FBTyxFQUFVLGFBQWEsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7OztZQTlCRixJQUFJLFNBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXksIGlzRnVuY3Rpb24gfSBmcm9tICcuLi9oZWxwZXJzL2hlbHBlcnMnO1xyXG5cclxuQFBpcGUoeyBuYW1lOiAnZ3JvdXBCeScgfSlcclxuZXhwb3J0IGNsYXNzIEdyb3VwQnlQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnksIGRpc2NyaW1pbmF0b3I6IGFueSA9IFtdLCBkZWxpbWl0ZXI6IHN0cmluZyA9ICd8Jyk6IGFueSB7XHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5ncm91cEJ5KGlucHV0LCBkaXNjcmltaW5hdG9yLCBkZWxpbWl0ZXIpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBncm91cEJ5KGxpc3Q6IGFueVtdLCBkaXNjcmltaW5hdG9yOiBhbnksIGRlbGltaXRlcjogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gbGlzdC5yZWR1Y2UoKGFjYzogYW55LCBwYXlsb2FkOiBzdHJpbmcpID0+IHtcclxuICAgICAgY29uc3Qga2V5ID0gdGhpcy5leHRyYWN0S2V5QnlEaXNjcmltaW5hdG9yKGRpc2NyaW1pbmF0b3IsIHBheWxvYWQsIGRlbGltaXRlcik7XHJcblxyXG4gICAgICBhY2Nba2V5XSA9IEFycmF5LmlzQXJyYXkoYWNjW2tleV0pID8gYWNjW2tleV0uY29uY2F0KFtwYXlsb2FkXSkgOiBbcGF5bG9hZF07XHJcblxyXG4gICAgICByZXR1cm4gYWNjO1xyXG4gICAgfSwge30pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBleHRyYWN0S2V5QnlEaXNjcmltaW5hdG9yKGRpc2NyaW1pbmF0b3I6IGFueSwgcGF5bG9hZDogc3RyaW5nLCBkZWxpbWl0ZXI6IHN0cmluZykge1xyXG4gICAgaWYgKGlzRnVuY3Rpb24oZGlzY3JpbWluYXRvcikpIHtcclxuICAgICAgcmV0dXJuICg8RnVuY3Rpb24+ZGlzY3JpbWluYXRvcikocGF5bG9hZCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGlzY3JpbWluYXRvcikpIHtcclxuICAgICAgcmV0dXJuIGRpc2NyaW1pbmF0b3IubWFwKGsgPT4gZXh0cmFjdERlZXBQcm9wZXJ0eUJ5TWFwS2V5KHBheWxvYWQsIGspKS5qb2luKGRlbGltaXRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleShwYXlsb2FkLCA8c3RyaW5nPmRpc2NyaW1pbmF0b3IpO1xyXG4gIH1cclxufVxyXG4iXX0=