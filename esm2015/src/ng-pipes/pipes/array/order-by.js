import { Pipe } from '@angular/core';
import { extractDeepPropertyByMapKey, isString, isUndefined } from '../helpers/helpers';
export class OrderByPipe {
    transform(input, config) {
        if (!Array.isArray(input)) {
            return input;
        }
        const out = [...input];
        // sort by multiple properties
        if (Array.isArray(config)) {
            return out.sort((a, b) => {
                const l = config.length;
                for (let i = 0; i < l; ++i) {
                    const [prop, asc] = OrderByPipe.extractFromConfig(config[i]);
                    const pos = OrderByPipe.orderCompare(prop, asc, a, b);
                    if (pos !== 0) {
                        return pos;
                    }
                }
                return 0;
            });
        }
        // sort by a single property value
        if (isString(config)) {
            const [prop, asc, sign] = OrderByPipe.extractFromConfig(config);
            if (config.length === 1) {
                // tslint:disable-next-line:switch-default
                switch (sign) {
                    case '+':
                        return out.sort(OrderByPipe.simpleSort.bind(this));
                    case '-':
                        return out.sort(OrderByPipe.simpleSort.bind(this)).reverse();
                }
            }
            return out.sort(OrderByPipe.orderCompare.bind(this, prop, asc));
        }
        // default sort by value
        return out.sort(OrderByPipe.simpleSort.bind(this));
    }
    static simpleSort(a, b) {
        return isString(a) && isString(b) ? a.toLowerCase().localeCompare(b.toLowerCase()) : a - b;
    }
    static orderCompare(prop, asc, a, b) {
        const first = extractDeepPropertyByMapKey(a, prop);
        const second = extractDeepPropertyByMapKey(b, prop);
        if (first === second) {
            return 0;
        }
        if (isUndefined(first) || first === '') {
            return 1;
        }
        if (isUndefined(second) || second === '') {
            return -1;
        }
        if (isString(first) && isString(second)) {
            const pos = first.toLowerCase().localeCompare(second.toLowerCase());
            return asc ? pos : -pos;
        }
        return asc ? first - second : second - first;
    }
    static extractFromConfig(config) {
        const sign = config.substr(0, 1);
        const prop = config.replace(/^[-+]/, '');
        const asc = sign !== '-';
        return [prop, asc, sign];
    }
}
OrderByPipe.decorators = [
    { type: Pipe, args: [{ name: 'orderBy' },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItYnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbmctcGlwZXMvcGlwZXMvYXJyYXkvb3JkZXItYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUd4RixNQUFNLE9BQU8sV0FBVztJQUl0QixTQUFTLENBQUMsS0FBVSxFQUFFLE1BQVk7UUFDaEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDekIsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztRQUV2Qiw4QkFBOEI7UUFDOUIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDdkIsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztnQkFDeEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtvQkFDMUIsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxXQUFXLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzdELE1BQU0sR0FBRyxHQUFHLFdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQ3RELElBQUksR0FBRyxLQUFLLENBQUMsRUFBRTt3QkFDYixPQUFPLEdBQUcsQ0FBQztxQkFDWjtpQkFD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QUFHLElBQUksS0FBSyxHQUFHLENBQUM7UUFFekIsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQzs7O1lBcEZGLElBQUksU0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleSwgaXNTdHJpbmcsIGlzVW5kZWZpbmVkIH0gZnJvbSAnLi4vaGVscGVycy9oZWxwZXJzJztcclxuXHJcbkBQaXBlKHsgbmFtZTogJ29yZGVyQnknIH0pXHJcbmV4cG9ydCBjbGFzcyBPcmRlckJ5UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShpbnB1dDogYW55W10sIGNvbmZpZz86IGFueSk6IGFueVtdO1xyXG4gIHRyYW5zZm9ybTxUPihpbnB1dDogVCwgY29uZmlnPzogYW55KTogVDtcclxuXHJcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnksIGNvbmZpZz86IGFueSk6IGFueSB7XHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBvdXQgPSBbLi4uaW5wdXRdO1xyXG5cclxuICAgIC8vIHNvcnQgYnkgbXVsdGlwbGUgcHJvcGVydGllc1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29uZmlnKSkge1xyXG4gICAgICByZXR1cm4gb3V0LnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICBjb25zdCBsID0gY29uZmlnLmxlbmd0aDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgICAgY29uc3QgW3Byb3AsIGFzY10gPSBPcmRlckJ5UGlwZS5leHRyYWN0RnJvbUNvbmZpZyhjb25maWdbaV0pO1xyXG4gICAgICAgICAgY29uc3QgcG9zID0gT3JkZXJCeVBpcGUub3JkZXJDb21wYXJlKHByb3AsIGFzYywgYSwgYik7XHJcbiAgICAgICAgICBpZiAocG9zICE9PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwb3M7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gMDtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gc29ydCBieSBhIHNpbmdsZSBwcm9wZXJ0eSB2YWx1ZVxyXG4gICAgaWYgKGlzU3RyaW5nKGNvbmZpZykpIHtcclxuICAgICAgY29uc3QgW3Byb3AsIGFzYywgc2lnbl0gPSBPcmRlckJ5UGlwZS5leHRyYWN0RnJvbUNvbmZpZyhjb25maWcpO1xyXG5cclxuICAgICAgaWYgKGNvbmZpZy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6c3dpdGNoLWRlZmF1bHRcclxuICAgICAgICBzd2l0Y2ggKHNpZ24pIHtcclxuICAgICAgICAgIGNhc2UgJysnOlxyXG4gICAgICAgICAgICByZXR1cm4gb3V0LnNvcnQoT3JkZXJCeVBpcGUuc2ltcGxlU29ydC5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgIGNhc2UgJy0nOlxyXG4gICAgICAgICAgICByZXR1cm4gb3V0LnNvcnQoT3JkZXJCeVBpcGUuc2ltcGxlU29ydC5iaW5kKHRoaXMpKS5yZXZlcnNlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gb3V0LnNvcnQoT3JkZXJCeVBpcGUub3JkZXJDb21wYXJlLmJpbmQodGhpcywgcHJvcCwgYXNjKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZGVmYXVsdCBzb3J0IGJ5IHZhbHVlXHJcbiAgICByZXR1cm4gb3V0LnNvcnQoT3JkZXJCeVBpcGUuc2ltcGxlU29ydC5iaW5kKHRoaXMpKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIHNpbXBsZVNvcnQoYTogYW55LCBiOiBhbnkpIHtcclxuICAgIHJldHVybiBpc1N0cmluZyhhKSAmJiBpc1N0cmluZyhiKSA/IGEudG9Mb3dlckNhc2UoKS5sb2NhbGVDb21wYXJlKGIudG9Mb3dlckNhc2UoKSkgOiBhIC0gYjtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIG9yZGVyQ29tcGFyZShwcm9wOiBzdHJpbmcsIGFzYzogYm9vbGVhbiwgYTogYW55LCBiOiBhbnkpIHtcclxuICAgIGNvbnN0IGZpcnN0ID0gZXh0cmFjdERlZXBQcm9wZXJ0eUJ5TWFwS2V5KGEsIHByb3ApO1xyXG4gICAgY29uc3Qgc2Vjb25kID0gZXh0cmFjdERlZXBQcm9wZXJ0eUJ5TWFwS2V5KGIsIHByb3ApO1xyXG5cclxuICAgIGlmIChmaXJzdCA9PT0gc2Vjb25kKSB7XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc1VuZGVmaW5lZChmaXJzdCkgfHwgZmlyc3QgPT09ICcnKSB7XHJcbiAgICAgIHJldHVybiAxO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc1VuZGVmaW5lZChzZWNvbmQpIHx8IHNlY29uZCA9PT0gJycpIHtcclxuICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc1N0cmluZyhmaXJzdCkgJiYgaXNTdHJpbmcoc2Vjb25kKSkge1xyXG4gICAgICBjb25zdCBwb3MgPSBmaXJzdC50b0xvd2VyQ2FzZSgpLmxvY2FsZUNvbXBhcmUoc2Vjb25kLnRvTG93ZXJDYXNlKCkpO1xyXG5cclxuICAgICAgcmV0dXJuIGFzYyA/IHBvcyA6IC1wb3M7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGFzYyA/IGZpcnN0IC0gc2Vjb25kIDogc2Vjb25kIC0gZmlyc3Q7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBleHRyYWN0RnJvbUNvbmZpZyhjb25maWc6IGFueSkge1xyXG4gICAgY29uc3Qgc2lnbiA9IGNvbmZpZy5zdWJzdHIoMCwgMSk7XHJcbiAgICBjb25zdCBwcm9wID0gY29uZmlnLnJlcGxhY2UoL15bLStdLywgJycpO1xyXG4gICAgY29uc3QgYXNjID0gc2lnbiAhPT0gJy0nO1xyXG5cclxuICAgIHJldHVybiBbcHJvcCwgYXNjLCBzaWduXTtcclxuICB9XHJcbn1cclxuIl19