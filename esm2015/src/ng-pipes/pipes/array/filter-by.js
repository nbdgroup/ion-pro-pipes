import { Pipe } from '@angular/core';
import { extractDeepPropertyByMapKey, extractDeepPropertyByParentMapKey, isBoolean, isNumberFinite, isString, isUndefined, } from '../helpers/helpers';
// tslint:disable no-bitwise
export class FilterByPipe {
    transform(input, props, search = '', strict = false, reverse = false) {
        if (!Array.isArray(input) ||
            (!Array.isArray(search) && !isString(search) && !isNumberFinite(search) && !isBoolean(search))) {
            return input;
        }
        const terms = String(search)
            .toLowerCase()
            .split(',');
        return input.filter(obj => {
            return props.some(prop => {
                return terms.some(term => {
                    const value = extractDeepPropertyByMapKey(obj, prop);
                    /* tslint:disable */
                    const { props, tail } = extractDeepPropertyByParentMapKey(obj, prop);
                    if (isUndefined(value) && !isUndefined(props) && Array.isArray(props)) {
                        return props.some(parent => {
                            const str = String(parent[tail]).toLowerCase();
                            return reverse ? (strict ? str !== term : ~str.indexOf(term)) : (strict ? str === term : !!~str.indexOf(term));
                        });
                    }
                    if (isUndefined(value)) {
                        return false;
                    }
                    const strValue = String(value).toLowerCase();
                    return reverse ? (strict ? term !== strValue : ~strValue.indexOf(term)) : (strict ? term === strValue : !!~strValue.indexOf(term));
                });
            });
        });
    }
}
FilterByPipe.decorators = [
    { type: Pipe, args: [{ name: 'filterBy' },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL25nLXBpcGVzL3BpcGVzL2FycmF5L2ZpbHRlci1ieS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQ0wsMkJBQTJCLEVBQzNCLGlDQUFpQyxFQUNqQyxTQUFTLEVBQ1QsY0FBYyxFQUNkLFFBQVEsRUFDUixXQUFXLEdBQ1osTUFBTSxvQkFBb0IsQ0FBQztBQUU1Qiw0QkFBNEI7QUFFNUIsTUFBTSxPQUFPLFlBQVk7SUFHdkIsU0FBUyxDQUFDLEtBQVUsRUFBRSxLQUFvQixFQUFFLFNBQWMsRUFBRSxFQUFFLFNBQWtCLEtBQUssRUFBRSxVQUFtQixLQUFLO1FBQzdHLElBQ0UsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztZQUNyQixDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUM5RjtZQUNBLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO2FBQ3pCLFdBQVcsRUFBRTthQUNiLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVkLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN4QixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3ZCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDdkIsTUFBTSxLQUFLLEdBQUcsMkJBQTJCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO29CQUNyRCxvQkFBb0I7b0JBQ3BCLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEdBQUcsaUNBQWlDLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO29CQUVyRSxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO3dCQUNyRSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7NEJBQ3pCLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQzs0QkFFL0MsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzt3QkFDakgsQ0FBQyxDQUFDLENBQUM7cUJBQ0o7b0JBRUQsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUU7d0JBQ3RCLE9BQU8sS0FBSyxDQUFDO3FCQUNkO29CQUVELE1BQU0sUUFBUSxHQUFXLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztvQkFFckQsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDckksQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBekNGLElBQUksU0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7XHJcbiAgZXh0cmFjdERlZXBQcm9wZXJ0eUJ5TWFwS2V5LFxyXG4gIGV4dHJhY3REZWVwUHJvcGVydHlCeVBhcmVudE1hcEtleSxcclxuICBpc0Jvb2xlYW4sXHJcbiAgaXNOdW1iZXJGaW5pdGUsXHJcbiAgaXNTdHJpbmcsXHJcbiAgaXNVbmRlZmluZWQsXHJcbn0gZnJvbSAnLi4vaGVscGVycy9oZWxwZXJzJztcclxuXHJcbi8vIHRzbGludDpkaXNhYmxlIG5vLWJpdHdpc2VcclxuQFBpcGUoeyBuYW1lOiAnZmlsdGVyQnknIH0pXHJcbmV4cG9ydCBjbGFzcyBGaWx0ZXJCeVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueVtdLCBwcm9wczogQXJyYXk8c3RyaW5nPiwgc2VhcmNoPzogYW55LCBzdHJpY3Q/OiBib29sZWFuLCByZXZlcnNlPzogYm9vbGVhbik6IGFueVtdO1xyXG4gIHRyYW5zZm9ybTxUPihpbnB1dDogVCwgcHJvcHM6IEFycmF5PHN0cmluZz4sIHNlYXJjaD86IGFueSwgc3RyaWN0PzogYm9vbGVhbiwgcmV2ZXJzZT86IGJvb2xlYW4pOiBUO1xyXG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBwcm9wczogQXJyYXk8c3RyaW5nPiwgc2VhcmNoOiBhbnkgPSAnJywgc3RyaWN0OiBib29sZWFuID0gZmFsc2UsIHJldmVyc2U6IGJvb2xlYW4gPSBmYWxzZSk6IGFueSB7XHJcbiAgICBpZiAoXHJcbiAgICAgICFBcnJheS5pc0FycmF5KGlucHV0KSB8fFxyXG4gICAgICAoIUFycmF5LmlzQXJyYXkoc2VhcmNoKSAmJiAhaXNTdHJpbmcoc2VhcmNoKSAmJiAhaXNOdW1iZXJGaW5pdGUoc2VhcmNoKSAmJiAhaXNCb29sZWFuKHNlYXJjaCkpXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRlcm1zID0gU3RyaW5nKHNlYXJjaClcclxuICAgICAgLnRvTG93ZXJDYXNlKClcclxuICAgICAgLnNwbGl0KCcsJyk7XHJcblxyXG4gICAgcmV0dXJuIGlucHV0LmZpbHRlcihvYmogPT4ge1xyXG4gICAgICByZXR1cm4gcHJvcHMuc29tZShwcm9wID0+IHtcclxuICAgICAgICByZXR1cm4gdGVybXMuc29tZSh0ZXJtID0+IHtcclxuICAgICAgICAgIGNvbnN0IHZhbHVlID0gZXh0cmFjdERlZXBQcm9wZXJ0eUJ5TWFwS2V5KG9iaiwgcHJvcCk7XHJcbiAgICAgICAgICAvKiB0c2xpbnQ6ZGlzYWJsZSAqL1xyXG4gICAgICAgICAgY29uc3QgeyBwcm9wcywgdGFpbCB9ID0gZXh0cmFjdERlZXBQcm9wZXJ0eUJ5UGFyZW50TWFwS2V5KG9iaiwgcHJvcCk7XHJcblxyXG4gICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSAmJiAhaXNVbmRlZmluZWQocHJvcHMpICYmIEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9wcy5zb21lKHBhcmVudCA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc3Qgc3RyID0gU3RyaW5nKHBhcmVudFt0YWlsXSkudG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgICAgICAgICAgICAgcmV0dXJuIHJldmVyc2UgPyAoc3RyaWN0ID8gc3RyICE9PSB0ZXJtIDogfnN0ci5pbmRleE9mKHRlcm0pKSA6IChzdHJpY3QgPyBzdHIgPT09IHRlcm0gOiAhIX5zdHIuaW5kZXhPZih0ZXJtKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGNvbnN0IHN0clZhbHVlOiBzdHJpbmcgPSBTdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgICAgICAgcmV0dXJuIHJldmVyc2UgPyAoc3RyaWN0ID8gdGVybSAhPT0gc3RyVmFsdWUgOiB+c3RyVmFsdWUuaW5kZXhPZih0ZXJtKSkgOiAoc3RyaWN0ID8gdGVybSA9PT0gc3RyVmFsdWUgOiAhIX5zdHJWYWx1ZS5pbmRleE9mKHRlcm0pKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19