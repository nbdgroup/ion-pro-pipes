import { DiffPipe } from './diff';
import { InitialPipe } from './initial';
import { FlattenPipe } from './flatten';
import { IntersectionPipe } from './intersection';
import { ReversePipe } from './reverse';
import { TailPipe } from './tail';
import { TrurthifyPipe } from './truthify';
import { UnionPipe } from './union';
import { UniquePipe } from './unique';
import { WithoutPipe } from './without';
import { PluckPipe } from './pluck';
import { ShufflePipe } from './shuffle';
import { EveryPipe } from './every';
import { SomePipe } from './some';
import { SamplePipe } from './sample';
import { GroupByPipe } from './group-by';
import { FilterByPipe } from './filter-by';
import { OrderByPipe } from './order-by';
import { NgModule } from '@angular/core';
import { GroupByImpurePipe } from './group-by-impure';
import { FilterByImpurePipe } from './filter-by-impure';
import { OrderByImpurePipe } from './order-by-impure';
import { RangePipe } from './range';
import { ChunkPipe } from './chunk';
import { FromPairsPipe } from './from-pairs';
const ARRAY_PIPES = [
    DiffPipe,
    FlattenPipe,
    InitialPipe,
    IntersectionPipe,
    ReversePipe,
    TailPipe,
    TrurthifyPipe,
    UnionPipe,
    UniquePipe,
    WithoutPipe,
    PluckPipe,
    ShufflePipe,
    EveryPipe,
    SomePipe,
    SamplePipe,
    GroupByPipe,
    GroupByImpurePipe,
    FilterByPipe,
    FilterByImpurePipe,
    OrderByPipe,
    OrderByImpurePipe,
    RangePipe,
    ChunkPipe,
    FromPairsPipe
];
export class NgArrayPipesModule {
}
NgArrayPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: ARRAY_PIPES,
                imports: [],
                exports: ARRAY_PIPES,
            },] }
];
export { DiffPipe } from './diff';
export { InitialPipe } from './initial';
export { FlattenPipe } from './flatten';
export { IntersectionPipe } from './intersection';
export { ReversePipe } from './reverse';
export { TailPipe } from './tail';
export { TrurthifyPipe } from './truthify';
export { UnionPipe } from './union';
export { UniquePipe } from './unique';
export { WithoutPipe } from './without';
export { PluckPipe } from './pluck';
export { ShufflePipe } from './shuffle';
export { EveryPipe } from './every';
export { SomePipe } from './some';
export { SamplePipe } from './sample';
export { GroupByPipe } from './group-by';
export { FilterByPipe } from './filter-by';
export { OrderByPipe } from './order-by';
export { GroupByImpurePipe } from './group-by-impure';
export { FilterByImpurePipe } from './filter-by-impure';
export { OrderByImpurePipe } from './order-by-impure';
export { RangePipe } from './range';
export { ChunkPipe } from './chunk';
export { FromPairsPipe } from './from-pairs';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbmctcGlwZXMvcGlwZXMvYXJyYXkvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDeEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFN0MsTUFBTSxXQUFXLEdBQUc7SUFDbEIsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsZ0JBQWdCO0lBQ2hCLFdBQVc7SUFDWCxRQUFRO0lBQ1IsYUFBYTtJQUNiLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLGlCQUFpQjtJQUNqQixZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLFdBQVc7SUFDWCxpQkFBaUI7SUFDakIsU0FBUztJQUNULFNBQVM7SUFDVCxhQUFhO0NBQ2QsQ0FBQztBQU9GLE1BQU0sT0FBTyxrQkFBa0I7OztZQUw5QixRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFLFdBQVc7Z0JBQ3pCLE9BQU8sRUFBRSxFQUFFO2dCQUNYLE9BQU8sRUFBRSxXQUFXO2FBQ3JCOztBQUdELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN6QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGNBQWMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpZmZQaXBlIH0gZnJvbSAnLi9kaWZmJztcclxuaW1wb3J0IHsgSW5pdGlhbFBpcGUgfSBmcm9tICcuL2luaXRpYWwnO1xyXG5pbXBvcnQgeyBGbGF0dGVuUGlwZSB9IGZyb20gJy4vZmxhdHRlbic7XHJcbmltcG9ydCB7IEludGVyc2VjdGlvblBpcGUgfSBmcm9tICcuL2ludGVyc2VjdGlvbic7XHJcbmltcG9ydCB7IFJldmVyc2VQaXBlIH0gZnJvbSAnLi9yZXZlcnNlJztcclxuaW1wb3J0IHsgVGFpbFBpcGUgfSBmcm9tICcuL3RhaWwnO1xyXG5pbXBvcnQgeyBUcnVydGhpZnlQaXBlIH0gZnJvbSAnLi90cnV0aGlmeSc7XHJcbmltcG9ydCB7IFVuaW9uUGlwZSB9IGZyb20gJy4vdW5pb24nO1xyXG5pbXBvcnQgeyBVbmlxdWVQaXBlIH0gZnJvbSAnLi91bmlxdWUnO1xyXG5pbXBvcnQgeyBXaXRob3V0UGlwZSB9IGZyb20gJy4vd2l0aG91dCc7XHJcbmltcG9ydCB7IFBsdWNrUGlwZSB9IGZyb20gJy4vcGx1Y2snO1xyXG5pbXBvcnQgeyBTaHVmZmxlUGlwZSB9IGZyb20gJy4vc2h1ZmZsZSc7XHJcbmltcG9ydCB7IEV2ZXJ5UGlwZSB9IGZyb20gJy4vZXZlcnknO1xyXG5pbXBvcnQgeyBTb21lUGlwZSB9IGZyb20gJy4vc29tZSc7XHJcbmltcG9ydCB7IFNhbXBsZVBpcGUgfSBmcm9tICcuL3NhbXBsZSc7XHJcbmltcG9ydCB7IEdyb3VwQnlQaXBlIH0gZnJvbSAnLi9ncm91cC1ieSc7XHJcbmltcG9ydCB7IEZpbHRlckJ5UGlwZSB9IGZyb20gJy4vZmlsdGVyLWJ5JztcclxuaW1wb3J0IHsgT3JkZXJCeVBpcGUgfSBmcm9tICcuL29yZGVyLWJ5JztcclxuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgR3JvdXBCeUltcHVyZVBpcGUgfSBmcm9tICcuL2dyb3VwLWJ5LWltcHVyZSc7XHJcbmltcG9ydCB7IEZpbHRlckJ5SW1wdXJlUGlwZSB9IGZyb20gJy4vZmlsdGVyLWJ5LWltcHVyZSc7XHJcbmltcG9ydCB7IE9yZGVyQnlJbXB1cmVQaXBlIH0gZnJvbSAnLi9vcmRlci1ieS1pbXB1cmUnO1xyXG5pbXBvcnQgeyBSYW5nZVBpcGUgfSBmcm9tICcuL3JhbmdlJztcclxuaW1wb3J0IHsgQ2h1bmtQaXBlIH0gZnJvbSAnLi9jaHVuayc7XHJcbmltcG9ydCB7IEZyb21QYWlyc1BpcGUgfSBmcm9tICcuL2Zyb20tcGFpcnMnO1xyXG5cclxuY29uc3QgQVJSQVlfUElQRVMgPSBbXHJcbiAgRGlmZlBpcGUsXHJcbiAgRmxhdHRlblBpcGUsXHJcbiAgSW5pdGlhbFBpcGUsXHJcbiAgSW50ZXJzZWN0aW9uUGlwZSxcclxuICBSZXZlcnNlUGlwZSxcclxuICBUYWlsUGlwZSxcclxuICBUcnVydGhpZnlQaXBlLFxyXG4gIFVuaW9uUGlwZSxcclxuICBVbmlxdWVQaXBlLFxyXG4gIFdpdGhvdXRQaXBlLFxyXG4gIFBsdWNrUGlwZSxcclxuICBTaHVmZmxlUGlwZSxcclxuICBFdmVyeVBpcGUsXHJcbiAgU29tZVBpcGUsXHJcbiAgU2FtcGxlUGlwZSxcclxuICBHcm91cEJ5UGlwZSxcclxuICBHcm91cEJ5SW1wdXJlUGlwZSxcclxuICBGaWx0ZXJCeVBpcGUsXHJcbiAgRmlsdGVyQnlJbXB1cmVQaXBlLFxyXG4gIE9yZGVyQnlQaXBlLFxyXG4gIE9yZGVyQnlJbXB1cmVQaXBlLFxyXG4gIFJhbmdlUGlwZSxcclxuICBDaHVua1BpcGUsXHJcbiAgRnJvbVBhaXJzUGlwZVxyXG5dO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IEFSUkFZX1BJUEVTLFxyXG4gIGltcG9ydHM6IFtdLFxyXG4gIGV4cG9ydHM6IEFSUkFZX1BJUEVTLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdBcnJheVBpcGVzTW9kdWxlIHt9XHJcblxyXG5leHBvcnQgeyBEaWZmUGlwZSB9IGZyb20gJy4vZGlmZic7XHJcbmV4cG9ydCB7IEluaXRpYWxQaXBlIH0gZnJvbSAnLi9pbml0aWFsJztcclxuZXhwb3J0IHsgRmxhdHRlblBpcGUgfSBmcm9tICcuL2ZsYXR0ZW4nO1xyXG5leHBvcnQgeyBJbnRlcnNlY3Rpb25QaXBlIH0gZnJvbSAnLi9pbnRlcnNlY3Rpb24nO1xyXG5leHBvcnQgeyBSZXZlcnNlUGlwZSB9IGZyb20gJy4vcmV2ZXJzZSc7XHJcbmV4cG9ydCB7IFRhaWxQaXBlIH0gZnJvbSAnLi90YWlsJztcclxuZXhwb3J0IHsgVHJ1cnRoaWZ5UGlwZSB9IGZyb20gJy4vdHJ1dGhpZnknO1xyXG5leHBvcnQgeyBVbmlvblBpcGUgfSBmcm9tICcuL3VuaW9uJztcclxuZXhwb3J0IHsgVW5pcXVlUGlwZSB9IGZyb20gJy4vdW5pcXVlJztcclxuZXhwb3J0IHsgV2l0aG91dFBpcGUgfSBmcm9tICcuL3dpdGhvdXQnO1xyXG5leHBvcnQgeyBQbHVja1BpcGUgfSBmcm9tICcuL3BsdWNrJztcclxuZXhwb3J0IHsgU2h1ZmZsZVBpcGUgfSBmcm9tICcuL3NodWZmbGUnO1xyXG5leHBvcnQgeyBFdmVyeVBpcGUgfSBmcm9tICcuL2V2ZXJ5JztcclxuZXhwb3J0IHsgU29tZVBpcGUgfSBmcm9tICcuL3NvbWUnO1xyXG5leHBvcnQgeyBTYW1wbGVQaXBlIH0gZnJvbSAnLi9zYW1wbGUnO1xyXG5leHBvcnQgeyBHcm91cEJ5UGlwZSB9IGZyb20gJy4vZ3JvdXAtYnknO1xyXG5leHBvcnQgeyBGaWx0ZXJCeVBpcGUgfSBmcm9tICcuL2ZpbHRlci1ieSc7XHJcbmV4cG9ydCB7IE9yZGVyQnlQaXBlIH0gZnJvbSAnLi9vcmRlci1ieSc7XHJcbmV4cG9ydCB7IEdyb3VwQnlJbXB1cmVQaXBlIH0gZnJvbSAnLi9ncm91cC1ieS1pbXB1cmUnO1xyXG5leHBvcnQgeyBGaWx0ZXJCeUltcHVyZVBpcGUgfSBmcm9tICcuL2ZpbHRlci1ieS1pbXB1cmUnO1xyXG5leHBvcnQgeyBPcmRlckJ5SW1wdXJlUGlwZSB9IGZyb20gJy4vb3JkZXItYnktaW1wdXJlJztcclxuZXhwb3J0IHsgUmFuZ2VQaXBlIH0gZnJvbSAnLi9yYW5nZSc7XHJcbmV4cG9ydCB7IENodW5rUGlwZSB9IGZyb20gJy4vY2h1bmsnO1xyXG5leHBvcnQgeyBGcm9tUGFpcnNQaXBlIH0gZnJvbSAnLi9mcm9tLXBhaXJzJztcclxuIl19